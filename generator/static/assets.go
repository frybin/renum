// Code generated by fileb0x at "2019-08-27 12:38:41.578283 -0700 PDT m=+0.002510380" from config file "assets.toml" DO NOT EDIT.
// modification hash(965fe8a06a9c929e6689ca3a7df8ea4a.e17f13136a3154d6a6bbde0013668fb9)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileAcronymsJSON is "acronyms.json"
var FileAcronymsJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x8a\xe6\x52\x50\x50\x72\xf4\xf5\x54\xd2\x01\x31\x5c\xfc\x82\x21\x0c\x67\x7f\xdf\x00\xd7\x10\xcf\x10\x4f\x7f\x3f\x25\xae\x58\x2e\x40\x00\x00\x00\xff\xff\xf5\x6c\x11\x85\x26\x00\x00\x00")

// FileEnumTmpl is "enum.tmpl"
var FileEnumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xbc\x5a\x5f\x73\xdb\xb8\x11\x7f\x16\x3f\xc5\x1e\x27\x69\xc9\x54\x91\x7c\xed\x74\xa6\x93\xab\x1f\x32\xb6\xeb\xfa\x1a\x3b\x6e\xe4\x74\xe6\x26\x93\xf1\xc1\x24\x28\xa1\x26\x41\x1e\x01\xc9\xd2\xa8\xfa\xee\x9d\x05\x40\x12\xa4\x48\x8a\xd2\xe5\xee\x21\x13\x19\xd8\xbf\x3f\xec\x2e\x16\x20\xb6\xdb\xb7\x10\xd2\x88\x71\x0a\xee\x82\x92\x90\xe6\xee\x6e\xe7\x4c\xa7\x70\x91\x86\x14\xe6\x94\xd3\x9c\x48\x1a\xc2\xd3\x06\x72\xca\x97\x09\x78\x73\x26\x17\xcb\xa7\x49\x90\x26\xd3\x39\xe5\x67\x01\x0b\xe9\x54\x4d\xf9\xc8\x76\xf9\x11\xee\x3e\x3e\xc0\xd5\xe5\xcd\xc3\x77\x8e\x93\x91\xe0\x99\xcc\x29\x6c\xb7\x13\xf3\x73\xb7\x73\x1c\x96\x64\x69\x2e\xc1\x73\x46\x23\x97\xe6\x79\x9a\x0b\xd7\x01\x00\x70\xa3\x44\xba\x38\xb8\xe4\x2c\x48\x43\x6a\xff\x9e\x2e\x65\xf4\x37\xd7\xf1\x9d\xed\x96\xf2\x10\xde\xa2\x1c\xdb\x76\xf5\x3f\x93\x2c\xe5\xc6\xfe\xed\x76\x12\xa4\x3c\x62\xf3\xc9\x15\x5f\x26\x37\x97\xbb\x1d\x30\x01\xc4\x72\x49\x6e\x32\x0a\x24\x66\x44\x40\x94\xe6\x20\x17\xb4\x8d\x09\x3d\x9b\x38\x8a\xb6\x65\xb6\x1a\xba\x4e\x27\x0f\x9b\x0c\xfd\x43\xb3\xd0\xc6\xa6\x89\x28\x09\x8d\x0b\x52\x2e\xd0\x7b\x9c\x7b\x85\x83\x77\x24\xa1\xf0\xee\x1c\xea\xd2\x95\x8f\x8a\x66\x45\x72\x81\xf3\x21\x0b\x24\xb8\x31\x11\x32\x8d\x22\x41\xa5\x0b\x67\x86\x08\x72\xc2\xe7\x14\x5e\xe5\x37\x3c\xa4\xeb\x31\xb2\xc4\xcb\x9a\xcc\xff\xe0\x80\x40\x9b\x46\x4a\x26\x4a\xf9\xa8\xa4\x20\x55\x16\x2f\x83\xe7\xba\x68\xad\xf5\x7f\x10\xb1\x5c\x48\xd8\xed\xb6\x5b\x78\x95\x96\x0c\x62\xf9\x64\x94\x68\xc9\x85\x6a\xa3\x00\x58\x04\xf4\x97\x82\xe2\x9e\x88\x80\xc4\xe0\x3e\xba\xbb\xdd\x74\x0a\xb3\x67\x96\x65\x34\x04\x35\xb9\xdd\xd2\x58\x50\x35\xbe\xdd\x16\xf4\x39\x8d\xd8\x9a\x86\x9a\xcf\x2c\x1c\x57\x2b\xa1\x99\xf4\x7a\xe9\x25\x29\x11\xdc\xed\x26\x2a\x36\x0a\x17\x59\x54\xe8\xbf\x48\x93\x84\x72\x89\x13\xb6\x1a\x6b\xd8\x2c\xd9\x3e\xeb\x25\x15\x41\xce\x32\x8c\xab\x26\x7b\x63\xaa\x12\x01\x3d\x9e\x54\xd0\x18\xbc\xce\x14\xb4\x96\x13\x70\x0e\x2c\x95\x44\x13\x72\x0a\x67\x25\xec\xbb\x1d\xfc\x09\xac\x65\x40\x46\xa5\x51\x63\x68\xe8\xed\x95\xb5\x29\xf7\x55\x74\x4a\x7b\xf5\xa8\x96\x18\x05\xa8\x20\xa8\xc7\x85\xfe\xa1\x83\xdb\xf2\x18\xd5\x17\xc1\x76\x1f\x2f\xe7\x8c\x8b\x09\xaa\x13\x19\x09\xe8\xe4\x8a\x93\xa7\x98\xaa\x9c\x00\x78\xdc\x4f\xa4\x92\x12\xce\xe1\xe7\x6a\x7a\x5f\x50\xf9\x6b\xb7\xfb\x59\xe9\x2d\x73\x6d\xd4\x22\xf6\xfe\x79\xae\x92\xab\x26\xf4\x3a\x9d\xdc\xeb\x62\xa4\xe1\xf8\xb9\x8b\xf5\x9e\xc8\x45\x17\x2b\xce\x21\xab\xef\x38\x2b\x92\x63\x2d\x9b\x4e\xe1\x2a\xcf\x3f\x73\x9d\xee\xe1\xbe\x44\xfc\x5f\x27\x0b\x13\x20\x17\x79\xfa\xc2\xe1\x65\x41\x39\xdc\x93\x5c\xd0\x7d\x7a\x4f\x80\x90\x39\xe3\x73\x1f\x02\xc2\x79\x2a\x21\x4e\x03\x22\x29\x10\xcc\x02\x16\xea\x84\x28\x4a\x57\x96\xa7\x2b\x16\xd2\xd0\xf0\x4c\x9c\xd1\x50\x6b\xce\x41\x17\xe1\xc9\x1d\x7d\xf1\x5c\xa3\x8a\x85\x94\x4b\x16\x6d\x2a\x25\xa5\x02\x15\xda\xae\x8f\xae\x6f\xb7\x20\x69\x92\xc5\x68\x95\xab\x15\xd3\xdc\x85\x89\xaa\x7d\xd3\x69\x97\x67\x40\x24\xb2\x49\x01\x32\x85\x20\xe5\x2b\x9a\x4b\x20\xc6\x72\x1c\x23\x2d\xb5\xd6\x89\x96\x3c\xe8\xc4\x8a\xe3\x32\x17\x70\x79\xfb\x04\x63\xed\xa4\x0f\x5b\x67\xc4\x22\x88\x29\x57\x2c\x3e\xfc\x1d\xbe\xc7\xb1\x51\x4e\xe5\x32\xe7\x2d\x7a\xbd\x33\x7f\x3c\x74\x65\x9d\xd1\xce\x71\x46\xaa\x64\x8e\x41\x65\x11\x6e\x5b\x93\x4b\x8a\x5b\xd8\xa7\x25\xa7\x37\x7c\xa6\x6c\xd4\xca\x95\x29\xba\xc0\x9e\x1b\x52\x24\xba\x42\x4b\xbf\xb5\x51\xe2\x85\xc9\x60\x81\x52\x03\x22\x28\x98\x6d\x75\x72\x23\x3e\xa4\x2f\x34\xf7\x94\x15\xfe\x3b\x67\x84\x71\x2c\xa9\x90\x6a\xcd\x05\x27\xcf\xf4\x11\x19\x9c\x11\xda\xba\x1e\x43\xfa\x8c\x6e\xb5\x24\x8c\xd2\xf5\x05\xfd\xfa\xfa\x03\x52\xa1\xfd\x85\x03\xeb\x31\x70\x16\x3b\x23\x65\x49\x4d\x43\x90\x26\x09\xe1\xe1\xdb\x61\x3a\x2e\x34\xf5\x89\xaa\x48\x42\xe3\x8b\x61\x7a\x90\x74\xa0\x96\x26\x9e\x9f\xb3\xac\x13\x4f\xbd\x0f\x0c\xb3\x41\xd3\x9e\xe6\xea\xec\xe2\xd3\xd5\xfb\xdb\x9b\xbb\xeb\xc7\x8b\xf7\xb3\xab\xc3\xba\x66\x41\x4e\x49\xc2\xf8\x7c\xa8\xcf\x21\x8d\xc8\x32\x96\xef\xbe\x6d\x8c\x7e\x1b\x51\x7a\x67\x6a\xd9\x8e\x1e\xe8\x1a\xf7\x39\x2c\x4c\xb7\x24\x17\x0b\x12\xab\x11\x96\x64\x31\xc5\x4e\x40\xa8\x42\x2a\x71\x2c\xd1\xf3\x31\xcd\x21\xa1\x72\x91\x86\xba\xfa\x78\xeb\x16\xe3\x7c\x5b\x9a\xe7\x83\xf7\xe5\xeb\xd3\x46\x52\xbb\xe2\x18\xc7\xf4\x84\xb7\x9e\x98\x22\xe0\xfb\x1a\x52\x5d\x2c\x3f\xf3\xe4\x80\x55\x4b\xde\x6d\xd7\x9b\x36\xc3\x6a\x22\x3d\x25\x43\xdb\xe0\x6b\xe3\xd0\x36\x6e\xba\x4f\x5d\x3c\x15\x91\xef\x8c\x64\x92\x29\x07\x70\xa6\xaf\xe6\xea\x1a\x86\x84\xdf\x9d\xa3\x2f\x76\xd9\xa2\x79\x8e\xeb\x3a\x7a\xb3\x86\x73\x90\x49\x56\xe2\xa0\x7d\x2e\xba\xb5\x8e\xd5\x9a\xfd\xfb\x83\x59\xac\x59\x40\x78\x13\x0f\x1c\xe3\x34\x07\xc6\x25\xcd\x23\xec\x0c\xfa\x91\x40\x7a\x4f\x37\x8f\x25\xcb\x76\x67\xc1\x80\xbb\xb8\xb5\x89\x54\x15\x73\x85\x10\xe8\x76\xce\xc3\x9e\xd3\x2f\x6b\xa8\xa6\xc4\x1c\xe0\xba\xc9\x58\x99\x09\x8d\xb1\x35\x61\xb0\x5d\xf9\x86\x80\xb3\x18\x67\x15\x30\xad\xd1\x5e\x81\xa8\x52\x0e\x93\xe3\x77\x58\x11\x04\xdb\x74\x28\x75\xb4\xc3\x9c\xad\x68\xae\xe7\x5a\x31\x6f\x83\x5c\x51\x63\x3e\x68\x6e\x7d\x50\x68\xc9\x8a\x2a\x1d\xc6\xc3\x22\xe3\x1f\x31\x99\x8b\x22\x36\xe8\x5e\xaa\x5c\xa7\x31\xe1\x73\x88\x62\x62\x8e\x3d\x95\xc1\x80\xf6\x1e\x8a\x14\x2a\x31\x50\xca\x66\xa2\x8a\x90\x83\xf0\xaf\x48\xec\x1b\x70\x57\x8e\x8d\xb9\x86\xf6\xba\xdf\xd6\x6b\x2a\xa5\x8d\xee\x10\x63\xaf\x29\x56\x1c\x2b\xa2\x2d\x5c\xdf\xac\x8d\x5e\x3c\x97\x36\x15\x5b\xa7\x78\x91\x45\xdf\xff\x65\x9a\x21\xaa\xd0\xc0\xeb\x80\x76\x14\xec\xf9\x45\xdf\x56\x69\x76\xf7\x89\xdd\xc3\xcb\x7a\x91\x86\x54\x4c\x66\xca\x50\xb3\xba\x1f\xd2\xf4\x79\x99\x0d\x6e\x20\x5b\x4e\xe3\x48\xc0\xe4\x1f\x05\xd0\x5f\x96\x6c\x45\x63\xca\x65\xdb\x39\x5e\xe7\xb7\xf6\xb6\x4b\xa9\xc7\xc2\x36\x0d\x43\xda\xcd\xc7\x9e\xbd\xf7\x96\x64\x5f\x5a\x95\xf9\xd5\x16\xdc\xbd\x31\xb2\xd0\x64\xcd\x48\x9d\x41\x11\x56\x2c\x02\x42\x5d\x0c\x1c\xd8\x50\xa3\x44\x4e\x54\xaf\x19\x79\xee\xeb\x07\xef\xf5\xca\xc7\x93\x09\x76\xff\xc5\x09\xa3\xcd\x31\x99\x6f\xe0\xcb\x6b\xf1\xd5\x1d\x03\x0b\xf5\x3f\x1d\x00\x62\xf2\x63\xca\xb8\xd7\x75\xba\x1b\x83\x3b\x06\xd7\xf7\xcd\x51\x19\x4f\xac\xbf\x91\x8d\xa5\x65\xbe\x7d\x2c\xd7\xb9\xa0\xae\xb5\x1a\xb9\x80\x63\x83\xab\x1a\x12\xeb\x94\x83\xad\x03\x60\xac\x67\x5c\x7a\x6b\xff\x70\x8c\xff\x38\xfb\x78\x57\x6f\x41\xd4\x48\xc3\xa0\xff\x8a\x94\x4f\xcc\xfc\x70\xcb\x2c\x81\xbd\x5d\x88\x2d\xdd\xee\x45\x9a\x6d\x48\xa7\x65\x25\xc5\x11\xfb\x6f\x4d\xaa\xf7\xb4\xdf\x86\xe0\xfe\x5b\x1c\x78\x1d\x00\xb3\x85\xbd\x3b\x6f\xa8\xf4\x9e\xc6\xf0\x07\xe1\xff\x50\xdf\xe0\x00\xca\x95\xb0\x03\x46\x0b\x2f\xbb\x26\x2c\x52\xca\x29\x95\xed\xef\xe0\xf5\xca\x55\xf0\xf8\x0e\xc0\x6e\xd8\x06\x2b\x7e\xbb\x7e\xe7\xa7\xf7\xb7\x1f\xea\xa1\xa1\x46\x1a\x0b\xb0\x21\x49\x7c\x72\x68\xa0\x40\x0c\x0d\x6b\xbf\x18\xb4\x1f\xd7\xc2\xa2\xd3\xaa\x5f\x15\x16\xca\xb4\x72\xa5\xd4\xd6\xe7\xed\x37\x6a\x43\xe2\xa5\x14\xe2\xfd\x9a\x38\x51\x5e\xb6\xc6\xc9\xef\x17\x28\x65\xc0\xd4\xae\x91\xcb\x6b\x96\xf2\x2a\xb9\xa3\xe2\xc2\x39\x6e\xc4\x06\x22\x16\x6d\x1e\x97\x3c\xa4\xb9\x08\xd2\x9c\x16\xc1\x07\xb8\x31\x77\x4b\xd1\x47\xd0\x56\x59\x99\xbe\xd3\x1d\x26\x47\x1d\xa7\x5b\xc5\xa8\x33\xf9\x40\x29\xe5\x21\xb5\x55\x92\x28\x66\x87\xda\xa4\xaf\x12\xda\xad\xd2\x73\x75\x49\x26\x6b\xf5\xee\xba\xdb\x61\xfc\x75\x6d\x75\xaa\xab\xe7\x24\x61\xd1\xa6\x90\x61\x2e\xc4\xba\x18\xf4\xfa\x0b\x20\x10\x33\x21\x21\x8d\x20\x4b\x85\x60\x4f\x71\x71\xca\xd0\xb1\x28\x70\x66\x5f\x86\x49\xb2\x0e\xe1\x9e\x0f\x5f\xbe\x56\x3d\x9a\x4c\x32\x0c\xdc\x84\x3c\x53\xaf\x18\x1f\xab\x0b\xb1\x2e\x77\x70\xcf\x0e\xd2\x6c\xe3\xa9\xc0\xef\xa4\x2a\xa3\x18\x23\x7a\xa7\xef\x45\xbb\xee\x89\x66\x31\x53\x77\xbd\xdb\xad\x76\xcc\x42\x0a\x3a\xa1\x32\xdf\x30\x7a\xb0\xaa\x3e\x11\xf4\x7e\xd3\xc1\x63\x5c\x27\x66\x5a\x8b\x02\xad\xed\x83\x4f\x13\xc0\xb6\x16\xa9\x03\xcc\xca\xf3\x83\x88\x5a\xa4\x0d\x58\xf5\xa5\xbb\xfe\x00\xd6\x87\xb0\x06\x17\x6b\x5a\x66\x83\x3b\x89\xd3\x17\x9a\xab\x43\x68\x8f\x04\xeb\xee\xa9\x2e\x67\x3f\xef\x3b\x65\x54\x77\x68\x0d\x11\xcd\x9c\xef\x94\x50\xbf\x95\x6a\x48\x69\xcb\xf7\x6e\x5b\xac\x7b\xc3\xa6\x35\x7b\xb9\xde\x29\xe5\x96\x64\x9a\xb9\x81\xe9\x41\x20\x1b\x8c\xc7\x82\xd8\x64\x3f\x1e\xc0\xa6\x84\x53\xc0\xdb\xb3\xa2\x05\x38\x3c\x90\xeb\x42\xd3\xbc\xae\x31\x9b\xd6\xd0\x86\xa5\xe8\x40\xac\xb3\x25\x8b\xf0\x8f\x03\x07\xa9\xf5\xde\x99\x49\xc8\xbc\x76\xb9\x38\xfc\x04\x76\xe6\x7f\x75\x8a\xcf\x18\xc5\xb5\x6d\x59\x7c\xd0\x29\x55\x6d\x08\x16\x22\x8b\xa0\xf8\xfc\xd2\xe7\x5d\x45\x7e\x9c\x87\x65\x34\x9d\xe6\x67\xc5\xde\xeb\xed\x45\x71\x4f\xde\xe1\x6c\x70\x9c\xb3\xa5\xb8\xe3\x7c\x2d\x22\xff\x34\x57\x4b\xee\x5e\x4f\xcb\xfc\xe8\xf1\xb6\x7e\x95\x3e\xc8\xe3\x9a\xd8\xe3\xbc\xb6\x33\xf6\x34\xcf\x6b\x12\xfa\xd7\x59\x27\xf0\xb7\xf5\xdd\x12\x7a\xe4\x7a\x97\x55\xe6\xc4\x15\xaf\xf8\xbb\xbd\xee\xa8\x70\xff\x62\x3c\x14\xb5\xe2\xf6\xac\x46\x1a\xa5\x0d\xc9\xac\xee\xc3\x38\x97\x46\xe6\x26\x4f\xbf\x48\x28\xda\x8e\x39\x5b\x51\x0e\x09\x15\x82\xcc\x0f\x14\x3b\x94\x6b\x83\xa5\x4e\x33\xfd\x68\x29\x8b\x2b\xa0\xac\x73\x0d\x42\xa5\x8e\x29\xe5\x48\x27\xfb\xd1\x38\xcd\xd2\x65\x1e\xd0\x3a\x52\xd1\x32\x8e\xdb\xe1\xd2\xd4\x15\x60\xea\x0e\x3f\xcd\x25\x64\x44\x2e\x20\x64\x39\x0d\x64\xbc\x01\x99\xea\x0f\x1c\x55\x4f\xd6\x95\x56\x4a\xde\x91\x40\x19\x93\x4f\x87\xaa\x10\x70\x34\x58\xf7\x44\x2e\x5a\xa0\xca\xd4\xf0\x6f\x0c\x15\xea\x3e\x12\x28\x65\xee\xe9\x30\x69\xf6\x03\xbb\x68\xf9\xe8\xa2\x56\x6f\xd4\x37\x12\x93\x45\x19\xc9\x29\x47\xb7\xf5\xbb\x31\x9d\x4c\x4c\x0c\x72\xb9\x94\xde\x76\x25\xdd\xfd\x38\xc4\x31\xcf\xb4\xf4\xf3\x99\xf6\x97\x1e\xe0\xba\xe6\x6a\xe6\x46\xad\x8b\x1a\xb3\x7d\xc0\xa5\xad\xad\x59\xab\x3f\xbd\x0e\x54\x92\x87\xdb\x8f\xd4\x4e\xf9\xe2\xac\xbc\x2a\xe8\x7b\x8a\x63\xfc\xa8\xfe\x6e\x74\x6a\x34\x61\x52\xd2\xbc\x62\x08\x87\xf6\x6c\x25\x47\x3d\xf2\xba\x1d\x28\x19\xea\x2e\x74\x78\x60\xbd\xb7\x42\x1f\x3a\xb2\xce\xa2\xaa\x27\x5f\x68\x4f\x34\xd2\xcf\x16\xdd\x01\xc7\x25\x95\x84\xc5\xc3\xc1\xb0\x44\x1e\x99\x88\xb6\x07\xfd\xf9\xd8\x13\x1b\x35\x21\x9d\x59\x69\xdd\x48\xbe\xed\xfe\x22\xf3\xd3\xfb\x4f\xf7\x17\x3d\x90\xab\x79\x45\x5a\x03\x7c\x43\xf2\x2c\x78\x0c\xd4\x78\x03\xef\x87\x54\xcb\xec\xc0\x5a\x4d\x7e\xa2\x22\x4b\xf9\x11\x17\xf3\x46\xa8\xe7\x83\xd2\x6c\xde\x34\xa9\xfb\x7e\x83\x7b\xd0\x83\x7a\xe5\x44\x2b\xe6\x41\xa3\x02\x36\x55\x7c\xe6\xcf\x3c\x7d\xe1\xa6\xd2\x29\x61\xfa\x15\xcf\xde\x45\x69\xc5\x77\x23\x66\x92\xc8\xa5\xb0\x3f\xe0\xf5\xbb\x58\xc9\xf5\x7c\x78\x63\xcb\xd2\x92\xac\x7a\x61\x4f\xde\xd1\x97\xc8\x5b\x4f\x4a\x80\xc6\xb0\x9e\x18\x29\xbe\xd3\x7c\xaf\xda\x1d\x07\xff\x7c\x78\xb8\xef\x09\x03\x9c\xde\x8f\x82\x85\x94\x59\x57\x10\x28\x81\x1d\x31\x80\x73\x27\x84\x00\xb2\x59\x5f\x67\x0e\x2c\x7a\x69\xf2\xa0\x35\xff\xeb\x9f\xcf\x8e\x40\xeb\xe3\xec\x6a\xcd\x64\x0f\x5e\x9a\x60\x1f\xb1\x54\x3c\xd2\x35\x93\xbf\x23\x68\xda\x92\xe1\xb0\x59\x96\x0f\x02\xee\x7b\x67\xff\x51\x74\x0b\x6e\x3a\x61\xba\x01\xbb\xd5\xbd\x74\x1d\xad\xa4\x18\x6c\x00\x65\x88\xf7\x0f\x36\x62\x81\x7b\xb4\x61\x03\x6b\x57\x38\xf0\x05\x45\x33\x1c\x79\x23\x61\x8c\x3b\xf1\x5a\xa2\xe0\x3e\xba\xf5\x54\x48\xd6\x71\x52\xa5\xa0\x13\xad\xd6\x5a\xa5\xbf\x8a\x0c\x8c\xa2\xa2\x2a\x1d\x81\x8e\xb6\xf2\x34\x6c\x0c\x6f\xcf\xce\x56\xb4\x13\xc5\x1e\xf7\xff\x00\x00\x00\xff\xff\x30\x61\x7e\xf7\xe9\x30\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileAcronymsJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "acronyms.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileEnumTmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "enum.tmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
