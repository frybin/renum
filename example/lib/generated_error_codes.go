// Code generated by renum (github.com/gen0cide/renum)
// DO NOT EDIT!

package lib

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
	"unicode"
	"unicode/utf8"
)

// ErrorCode is a generated type alias for the ErrorCode enum.
type ErrorCode int

const (
	// ErrorCodeUndefinedEnumValue is an enum value for type ErrorCode.
	// ErrorCodeUndefinedEnumValue is the default value for enum type ErrorCode. It is meant to be a placeholder and default for unknown values.
	// This value is a default placeholder for any unknown type for the lib.ErrorCode enum.
	ErrorCodeUndefinedEnumValue ErrorCode = iota

	// ErrorCodeUnauthorized is an enum value for type ErrorCode.
	// Unauthorized is thrown when the request action cannot be taken.
	// Unauthorized is thrown to signify that the request was made by an *authenticated* requester, but that requester is not authorized to perform the requested action.
	ErrorCodeUnauthorized

	// ErrorCodeInvalidSQLQuery is an enum value for type ErrorCode.
	// InvalidSQLQuery is thrown when a user supplied SQL query is not valid.
	// INVALIDSQLQuery often means the caller should perform further validation in order to locate situations where they're taking unsanitized input from users and interpolating that value directly into the SQL query.
	ErrorCodeInvalidSQLQuery

	_ErrorCodeNamespace = `github.com.gen0cide.renum.example.lib`
	_ErrorCodePkgName   = `lib`
	_ErrorCodePkgPath   = `github.com/gen0cide/renum/example/lib`
)

var (
	// ErrUndefinedErrorCodeEnumValue is thrown when ParseErrorCode(s string) cannot locate a valid enum for the provided string.
	ErrUndefinedErrorCodeEnumValue = errors.New("cannot identify enum for provided value")
)

const _ErrorCodeName = "undefined_enum_valueunauthorizedinvalid_sql_query"

const _ErrorCodePascalName = "UndefinedEnumValueUnauthorizedInvalidSQLQuery"

const _ErrorCodeCamelName = "undefinedEnumValueunauthorizedinvalidSQLQuery"

const _ErrorCodeScreamingName = "UNDEFINED_ENUM_VALUEUNAUTHORIZEDINVALID_SQL_QUERY"

const _ErrorCodeCommandName = "undefined-enum-valueunauthorizedinvalid-sql-query"

var _ErrorCodeNames = []string{
	_ErrorCodeName[0:20],
	_ErrorCodeName[20:32],
	_ErrorCodeName[32:49],
}

// ErrorCodeNames returns a list of possible string values of ErrorCode.
func ErrorCodeNames() []string {
	tmp := make([]string, len(_ErrorCodeNames))
	copy(tmp, _ErrorCodeNames)
	return tmp
}

var _ErrorCodeValueSlice = []ErrorCode{
	ErrorCodeUndefinedEnumValue,
	ErrorCodeUnauthorized,
	ErrorCodeInvalidSQLQuery,
}

// ErrorCodeValues returns a list of possible enum values for the ErrorCode type.
func ErrorCodeValues() []ErrorCode {
	tmp := make([]ErrorCode, len(_ErrorCodeValueSlice))
	copy(tmp, _ErrorCodeValueSlice)
	return tmp
}

var _ErrorCodeValue = map[string]ErrorCode{
	_ErrorCodeName[0:20]:  0,
	_ErrorCodeName[20:32]: 1,
	_ErrorCodeName[32:49]: 2,
}

var _ErrorCodePascalValue = map[string]ErrorCode{
	_ErrorCodePascalName[0:18]:  0,
	_ErrorCodePascalName[18:30]: 1,
	_ErrorCodePascalName[30:45]: 2,
}

var _ErrorCodeCamelValue = map[string]ErrorCode{
	_ErrorCodeCamelName[0:18]:  0,
	_ErrorCodeCamelName[18:30]: 1,
	_ErrorCodeCamelName[30:45]: 2,
}

var _ErrorCodeScreamingValue = map[string]ErrorCode{
	_ErrorCodeScreamingName[0:20]:  0,
	_ErrorCodeScreamingName[20:32]: 1,
	_ErrorCodeScreamingName[32:49]: 2,
}

var _ErrorCodeCommandValue = map[string]ErrorCode{
	_ErrorCodeCommandName[0:20]:  0,
	_ErrorCodeCommandName[20:32]: 1,
	_ErrorCodeCommandName[32:49]: 2,
}

var _ErrorCodeMap = map[ErrorCode]string{
	0: _ErrorCodeName[0:20],
	1: _ErrorCodeName[20:32],
	2: _ErrorCodeName[32:49],
}

var _ErrorCodePascalMap = map[ErrorCode]string{
	0: _ErrorCodePascalName[0:18],
	1: _ErrorCodePascalName[18:30],
	2: _ErrorCodePascalName[30:45],
}

var _ErrorCodeCamelMap = map[ErrorCode]string{
	0: _ErrorCodeCamelName[0:18],
	1: _ErrorCodeCamelName[18:30],
	2: _ErrorCodeCamelName[30:45],
}

var _ErrorCodeScreamingMap = map[ErrorCode]string{
	0: _ErrorCodeScreamingName[0:20],
	1: _ErrorCodeScreamingName[20:32],
	2: _ErrorCodeScreamingName[32:49],
}

var _ErrorCodeCommandMap = map[ErrorCode]string{
	0: _ErrorCodeCommandName[0:20],
	1: _ErrorCodeCommandName[20:32],
	2: _ErrorCodeCommandName[32:49],
}

// String implements the Stringer interface.
func (x ErrorCode) String() string {
	if str, ok := _ErrorCodeMap[x]; ok {
		return str
	}

	return _ErrorCodeMap[ErrorCode(0)]
}

// SnakeCase returns the enum as a snake_case string.
func (x ErrorCode) SnakeCase() string {
	if str, ok := _ErrorCodeMap[x]; ok {
		return str
	}

	return _ErrorCodeMap[ErrorCode(0)]
}

// PascalCase returns the enum as a PascalCase string.
func (x ErrorCode) PascalCase() string {
	if str, ok := _ErrorCodePascalMap[x]; ok {
		return str
	}

	return _ErrorCodePascalMap[ErrorCode(0)]
}

// CamelCase returns the enum as a cascalCase string.
func (x ErrorCode) CamelCase() string {
	if str, ok := _ErrorCodeCamelMap[x]; ok {
		return str
	}

	return _ErrorCodeCamelMap[ErrorCode(0)]
}

// ScreamingCase returns the enum as a SCREAMING_CASE string.
func (x ErrorCode) ScreamingCase() string {
	if str, ok := _ErrorCodeScreamingMap[x]; ok {
		return str
	}

	return _ErrorCodeScreamingMap[ErrorCode(0)]
}

// CommandCase returns the enum as a SCREAMING_CASE string.
func (x ErrorCode) CommandCase() string {
	if str, ok := _ErrorCodeCommandMap[x]; ok {
		return str
	}

	return _ErrorCodeCommandMap[ErrorCode(0)]
}

var _ErrorCodeKinds = map[ErrorCode]string{
	ErrorCodeUndefinedEnumValue: `lib.ErrorCodeUndefinedEnumValue`,
	ErrorCodeUnauthorized:       `lib.ErrorCodeUnauthorized`,
	ErrorCodeInvalidSQLQuery:    `lib.ErrorCodeInvalidSQLQuery`,
}

// Kind returns a string of the Go type for the given message.
func (x ErrorCode) Kind() string {
	if str, ok := _ErrorCodeKinds[x]; ok {
		return str
	}

	return _ErrorCodeKinds[ErrorCode(0)]
}

var _ErrorCodeSources = map[ErrorCode]string{
	ErrorCodeUndefinedEnumValue: `github.com/gen0cide/renum/example/lib.ErrorCodeUndefinedEnumValue`,
	ErrorCodeUnauthorized:       `github.com/gen0cide/renum/example/lib.ErrorCodeUnauthorized`,
	ErrorCodeInvalidSQLQuery:    `github.com/gen0cide/renum/example/lib.ErrorCodeInvalidSQLQuery`,
}

// Source returns an import path directly to the type.
func (x ErrorCode) Source() string {
	if str, ok := _ErrorCodeSources[x]; ok {
		return str
	}

	return _ErrorCodeSources[ErrorCode(0)]
}

var _ErrorCodePaths = map[ErrorCode]string{
	ErrorCodeUndefinedEnumValue: `github.com.gen0cide.renum.example.lib.error_code_undefined_enum_value`,
	ErrorCodeUnauthorized:       `github.com.gen0cide.renum.example.lib.error_code_unauthorized`,
	ErrorCodeInvalidSQLQuery:    `github.com.gen0cide.renum.example.lib.error_code_invalid_sql_query`,
}

// Source returns an import path directly to the type.
func (x ErrorCode) Path() string {
	if str, ok := _ErrorCodePaths[x]; ok {
		return str
	}

	return _ErrorCodePaths[ErrorCode(0)]
}

// PackageName returns the name of the parent package for this type.
func (x ErrorCode) PackageName() string {
	return _ErrorCodePkgName
}

// ImportPath returns the full import path of the parent package
func (x ErrorCode) ImportPath() string {
	return _ErrorCodePkgPath
}

// Namespace implements the emitter.Namespaced interface.
func (x ErrorCode) Namespace() string {
	return _ErrorCodeNamespace
}

var _ErrorCodeDescriptions = map[ErrorCode]string{
	ErrorCodeUndefinedEnumValue: `This value is a default placeholder for any unknown type for the lib.ErrorCode enum.`,
	ErrorCodeUnauthorized:       `Unauthorized is thrown to signify that the request was made by an *authenticated* requester, but that requester is not authorized to perform the requested action.`,
	ErrorCodeInvalidSQLQuery:    `INVALIDSQLQuery often means the caller should perform further validation in order to locate situations where they're taking unsanitized input from users and interpolating that value directly into the SQL query.`,
}

// Description implements the emitter.Detailed interface.
func (x ErrorCode) Description() string {
	if str, ok := _ErrorCodeDescriptions[x]; ok {
		return str
	}

	return _ErrorCodeDescriptions[ErrorCode(0)]
}

var _ErrorCodeMessages = map[ErrorCode]string{
	ErrorCodeUndefinedEnumValue: `undefined enum value for type lib.ErrorCode`,
	ErrorCodeUnauthorized:       `request was unauthorized`,
	ErrorCodeInvalidSQLQuery:    `provided query was not valid sql`,
}

// Message returns the enum short message description.
func (x ErrorCode) Message() string {
	if str, ok := _ErrorCodeMessages[x]; ok {
		return str
	}

	return _ErrorCodeMessages[ErrorCode(0)]
}

var _ErrorCodeErrors = map[ErrorCode]string{
	ErrorCodeUndefinedEnumValue: `github.com.gen0cide.renum.example.lib.error_code_undefined_enum_value (0): undefined enum value for type lib.ErrorCode`,
	ErrorCodeUnauthorized:       `github.com.gen0cide.renum.example.lib.error_code_unauthorized (1): request was unauthorized`,
	ErrorCodeInvalidSQLQuery:    `github.com.gen0cide.renum.example.lib.error_code_invalid_sql_query (2): provided query was not valid sql`,
}

// Error implements the error interface.
func (x ErrorCode) Error() string {
	if str, ok := _ErrorCodeErrors[x]; ok {
		return str
	}

	return _ErrorCodeErrors[ErrorCode(0)]
}

// ParseErrorCode attempts to convert a string to a ErrorCode
func ParseErrorCode(name string) (ErrorCode, error) {
	if len(name) < 1 {
		return ErrorCode(0), ErrUndefinedErrorCodeEnumValue
	}

	first, _ := utf8.DecodeRuneInString(name)
	if first == utf8.RuneError {
		return ErrorCode(0), ErrUndefinedErrorCodeEnumValue
	}

	switch {
	case unicode.IsLower(first):
		// test for snake_case
		if x, ok := _ErrorCodeValue[name]; ok {
			return x, nil
		}

		// test for command-case
		if x, ok := _ErrorCodeCommandValue[name]; ok {
			return x, nil
		}

		// test for camelCase
		if x, ok := _ErrorCodeCamelValue[name]; ok {
			return x, nil
		}
	case unicode.IsUpper(first):
		// test for PascalCase
		if x, ok := _ErrorCodePascalValue[name]; ok {
			return x, nil
		}

		// test for SCREAMING_CASE
		if x, ok := _ErrorCodeScreamingValue[name]; ok {
			return x, nil
		}
	default:
		return ErrorCode(0), ErrUndefinedErrorCodeEnumValue
	}

	return ErrorCode(0), ErrUndefinedErrorCodeEnumValue
}

// MarshalText implements the text marshaller method
func (x ErrorCode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ErrorCode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseErrorCode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *ErrorCode) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = ErrorCode(0)
		return nil
	}

	tmp, err := ParseErrorCode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x ErrorCode) Value() (driver.Value, error) {
	return x.String(), nil
}

// LookupErrorCode attempts to convert a int to it's equivelent ErrorCode value.
func LookupErrorCode(id int) (ErrorCode, error) {
	if _, ok := _ErrorCodeMap[ErrorCode(id)]; ok {
		return ErrorCode(id), nil
	}
	return ErrorCode(0), fmt.Errorf("%T(%v) is not a valid ErrorCode, try [%s]", id, id, strings.Join(_ErrorCodeNames, ", "))
}

// Code implements the Coder interface.
func (x ErrorCode) Code() int {
	return int(x)
}

// MarshalJSON implements the json.Marshaler interface.
func (x ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (x *ErrorCode) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return fmt.Errorf("error unmarshaling JSON value: %v", err)
	}
	tmp, err := ParseErrorCode(s)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface.
func (x ErrorCode) MarshalYAML() (interface{}, error) {
	return x.String(), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface.
func (x *ErrorCode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return fmt.Errorf("error unmarshaling YAML value: %v", err)
	}

	tmp, err := ParseErrorCode(s)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
