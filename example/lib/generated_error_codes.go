// Code generated by go-enum
// DO NOT EDIT!

package lib

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

// ErrorCode is a generated type alias for the ErrorCode enum.
type ErrorCode int

const (
	// ErrorCodeUnknown is an enum value for type ErrorCode.
	// ErrorCodeUnknown is the default value for enum type ErrorCode. It is meant to be a placeholder and default for unknown values.
	// This value is a default placeholder for any unknown type for the lib.ErrorCode enum.
	ErrorCodeUnknown ErrorCode = iota

	// ErrorCodeUnauthorized is an enum value for type ErrorCode.
	// Unauthorized is thrown when the request action cannot be taken.
	// This error is used to signify that the request was made by an *authenticated* requester, but that requester is not authorized to perform the requested action.
	ErrorCodeUnauthorized

	// ErrorCodeInvalidSQLQuery is an enum value for type ErrorCode.
	// InvalidSQLQuery is thrown when a user supplied SQL query is not valid.
	// This error often means the caller should perform further validation in order to locate situations where they're taking unsanitized input from users and interpolating that value directly into the SQL query.
	ErrorCodeInvalidSQLQuery

	_ErrorCodeNamespace = `github.com.gen0cide.renum.example.lib`
	_ErrorCodePkgName   = `lib`
	_ErrorCodePkgPath   = `github.com/gen0cide/renum/example/lib`
)

const _ErrorCodeName = "unknownunauthorizedinvalid_sql_query"

var _ErrorCodeNames = []string{
	_ErrorCodeName[0:7],
	_ErrorCodeName[7:19],
	_ErrorCodeName[19:36],
}

// ErrorCodeNames returns a list of possible string values of ErrorCode.
func ErrorCodeNames() []string {
	tmp := make([]string, len(_ErrorCodeNames))
	copy(tmp, _ErrorCodeNames)
	return tmp
}

var _ErrorCodeMap = map[ErrorCode]string{
	0: _ErrorCodeName[0:7],
	1: _ErrorCodeName[7:19],
	2: _ErrorCodeName[19:36],
}

// String implements the Stringer interface.
func (x ErrorCode) String() string {
	if str, ok := _ErrorCodeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ErrorCode(%d)", x)
}

var _ErrorCodeKinds = map[ErrorCode]string{
	ErrorCodeUnknown:         `lib.ErrorCodeUnknown`,
	ErrorCodeUnauthorized:    `lib.ErrorCodeUnauthorized`,
	ErrorCodeInvalidSQLQuery: `lib.ErrorCodeInvalidSQLQuery`,
}

// Kind returns a string of the Go type for the given message.
func (x ErrorCode) Kind() string {
	if str, ok := _ErrorCodeKinds[x]; ok {
		return str
	}

	if str, ok := _ErrorCodeKinds[ErrorCodeUnknown]; ok {
		return str
	}

	return fmt.Sprintf("ErrorCode(%d)", x)
}

var _ErrorCodeSources = map[ErrorCode]string{
	ErrorCodeUnknown:         `github.com/gen0cide/renum/example/lib.ErrorCodeUnknown`,
	ErrorCodeUnauthorized:    `github.com/gen0cide/renum/example/lib.ErrorCodeUnauthorized`,
	ErrorCodeInvalidSQLQuery: `github.com/gen0cide/renum/example/lib.ErrorCodeInvalidSQLQuery`,
}

// Source returns an import path directly to the type.
func (x ErrorCode) Source() string {
	if str, ok := _ErrorCodeSources[x]; ok {
		return str
	}

	if str, ok := _ErrorCodeSources[ErrorCodeUnknown]; ok {
		return str
	}

	return fmt.Sprintf("ErrorCode(%d)", x)
}

var _ErrorCodePaths = map[ErrorCode]string{
	ErrorCodeUnknown:         `github.com.gen0cide.renum.example.lib.error_code_unknown`,
	ErrorCodeUnauthorized:    `github.com.gen0cide.renum.example.lib.error_code_unauthorized`,
	ErrorCodeInvalidSQLQuery: `github.com.gen0cide.renum.example.lib.error_code_invalid_sql_query`,
}

// Source returns an import path directly to the type.
func (x ErrorCode) Path() string {
	if str, ok := _ErrorCodePaths[x]; ok {
		return str
	}

	if str, ok := _ErrorCodePaths[ErrorCodeUnknown]; ok {
		return str
	}

	return fmt.Sprintf("github.com.gen0cide.renum.example.lib.error_code_out_of_bounds_enum_%d", x)
}

// PackageName returns the name of the parent package for this type.
func (x ErrorCode) PackageName() string {
	return _ErrorCodePkgName
}

// ImportPath returns the full import path of the parent package
func (x ErrorCode) ImportPath() string {
	return _ErrorCodePkgPath
}

// Namespace implements the emitter.Namespaced interface.
func (x ErrorCode) Namespace() string {
	return _ErrorCodeNamespace
}

var _ErrorCodeValue = map[string]ErrorCode{
	_ErrorCodeName[0:7]:   0,
	_ErrorCodeName[7:19]:  1,
	_ErrorCodeName[19:36]: 2,
}
var _ErrorCodeDescriptions = map[ErrorCode]string{
	ErrorCodeUnknown:         `This value is a default placeholder for any unknown type for the lib.ErrorCode enum.`,
	ErrorCodeUnauthorized:    `This error is used to signify that the request was made by an *authenticated* requester, but that requester is not authorized to perform the requested action.`,
	ErrorCodeInvalidSQLQuery: `This error often means the caller should perform further validation in order to locate situations where they're taking unsanitized input from users and interpolating that value directly into the SQL query.`,
}

// Description implements the emitter.Detailed interface.
func (x ErrorCode) Description() string {
	if str, ok := _ErrorCodeDescriptions[x]; ok {
		return str
	}

	if str, ok := _ErrorCodeDescriptions[ErrorCodeUnknown]; ok {
		return str
	}

	return fmt.Sprintf("ErrorCode(%d)", x)
}

var _ErrorCodeMessages = map[ErrorCode]string{
	ErrorCodeUnknown:         `unknown type for enum lib.ErrorCode`,
	ErrorCodeUnauthorized:    `The request was unauthorized.`,
	ErrorCodeInvalidSQLQuery: `The provided query was not valid SQL.`,
}

// Message returns the enum short message description.
func (x ErrorCode) Message() string {
	if str, ok := _ErrorCodeMessages[x]; ok {
		return str
	}

	return fmt.Sprintf("no message available for enum %s", x.String())
}

var _ErrorCodeErrors = map[ErrorCode]string{
	ErrorCodeUnknown:         `github.com.gen0cide.renum.example.lib.error_code_unknown (0): unknown type for enum lib.ErrorCode`,
	ErrorCodeUnauthorized:    `github.com.gen0cide.renum.example.lib.error_code_unauthorized (1): The request was unauthorized.`,
	ErrorCodeInvalidSQLQuery: `github.com.gen0cide.renum.example.lib.error_code_invalid_sql_query (2): The provided query was not valid SQL.`,
}

// Error implements the error interface.
func (x ErrorCode) Error() string {
	if str, ok := _ErrorCodeErrors[x]; ok {
		return str
	}

	return fmt.Sprintf("%s.error_code_%s (%d): %s", x.Namespace(), x.String(), x.Code(), x.Message())
}

// ParseErrorCode attempts to convert a string to a ErrorCode
func ParseErrorCode(name string) (ErrorCode, error) {
	if x, ok := _ErrorCodeValue[name]; ok {
		return x, nil
	}
	return ErrorCode(0), fmt.Errorf("%s is not a valid ErrorCode, try [%s]", name, strings.Join(_ErrorCodeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x *ErrorCode) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ErrorCode) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseErrorCode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *ErrorCode) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = ErrorCode(0)
		return nil
	}

	tmp, err := ParseErrorCode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x ErrorCode) Value() (driver.Value, error) {
	return x.String(), nil
}

// LookupErrorCode attempts to convert a int to it's equivelent ErrorCode value.
func LookupErrorCode(id int) (ErrorCode, error) {
	if _, ok := _ErrorCodeMap[ErrorCode(id)]; ok {
		return ErrorCode(id), nil
	}
	return ErrorCode(0), fmt.Errorf("%T(%v) is not a valid ErrorCode, try [%s]", id, id, strings.Join(_ErrorCodeNames, ", "))
}

// Code implements the Coder interface.
func (x ErrorCode) Code() int {
	return int(x)
}

// MarshalJSON implements the json.Marshaler interface.
func (x *ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (x *ErrorCode) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return fmt.Errorf("error unmarshaling JSON value: %v", err)
	}
	tmp, err := ParseErrorCode(s)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface.
func (x *ErrorCode) MarshalYAML() (interface{}, error) {
	return x.String(), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface.
func (x *ErrorCode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return fmt.Errorf("error unmarshaling YAML value: %v", err)
	}

	tmp, err := ParseErrorCode(s)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
